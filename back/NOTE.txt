// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// OpenZeppelin
import {IERC20} from "../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {IERC721} from "../node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol";
import {IERC1155} from "../node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import {Address} from "../node_modules/@openzeppelin/contracts/utils/Address.sol";
import {ReentrancyGuard} from "../node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol";

// Chainlink
import {ChainlinkClient} from "../node_modules/@chainlink/contracts/src/v0.8/ChainlinkClient.sol";
import {FunctionsRequest} from "../node_modules/@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol";

contract ScamHunterWallet is ChainlinkClient, ReentrancyGuard {
    using Address for address;
    using FunctionsRequest for FunctionsRequest.Request;

    mapping(address => bool) public authorizedSigners;

    address public oracle;
    address public openAIOracleContract;
    string public openAIApiKey;
    uint256 public ORACLE_PAYMENT;

    modifier onlyAuthorized() {
        require(authorizedSigners[msg.sender], "Not authorized");
        _;
    }

    constructor(
        address _oracle,
        address _openAIOracleContract,
        string memory _openAIApiKey,
        uint256 _oraclePayment
    ) {
        oracle = _oracle;
        openAIOracleContract = _openAIOracleContract;
        openAIApiKey = _openAIApiKey;
        ORACLE_PAYMENT = _oraclePayment;

        // Set Chainlink token
        setPublicChainlinkToken();
    }

    function authorize(address _signer) external {
        require(!_signer.isContract(), "Signer address cannot be a contract");
        authorizedSigners[_signer] = true;
    }

    function revokeAuthorization(address _signer) external {
        require(authorizedSigners[_signer], "Signer not authorized");
        authorizedSigners[_signer] = false;
    }

    function depositERC20(address _token, uint256 _amount) external {
        // Retrieve the allowance granted to the sender by the token owner
        uint256 allowedAmount = IERC20(_token).allowance(
            msg.sender,
            address(this)
        );

        // Check if the sender has enough allowance to transfer the requested amount
        require(allowedAmount >= _amount, "Insufficient allowance");

        // Transfer the tokens from the sender to this contract
        IERC20(_token).transferFrom(msg.sender, address(this), _amount);
    }

    function depositERC721(address _token, uint256 _tokenId) external {
        // Check if the caller owns the token
        require(
            IERC721(_token).ownerOf(_tokenId) == msg.sender,
            "Caller does not own the token"
        );

        // Transfer the token from the sender to this contract
        IERC721(_token).transferFrom(msg.sender, address(this), _tokenId);
    }

    function depositERC1155(
        address _token,
        uint256 _id,
        uint256 _amount,
        bytes memory _data
    ) external {
        // Check if the caller owns the token
        require(
            IERC1155(_token).balanceOf(msg.sender, _id) > 0,
            "Caller does not own the token"
        );

        // Transfer the token from the sender to this contract
        IERC1155(_token).safeTransferFrom(
            msg.sender,
            address(this),
            _id,
            _amount,
            _data
        );
    }

    function withdrawERC20(
        address _token,
        address _to,
        uint256 _amount,
        bytes calldata _signature
    ) external onlyAuthorized nonReentrant {
        require(
            verifySignature(msg.sender, _to, _amount, _signature),
            "Invalid signature"
        );
        IERC20(_token).transfer(_to, _amount);
    }

    function withdrawERC721(
        address _token,
        address _to,
        uint256 _tokenId,
        bytes calldata _signature
    ) external onlyAuthorized nonReentrant {
        require(
            verifySignature(msg.sender, _to, _tokenId, _signature),
            "Invalid signature"
        );
        IERC721(_token).transferFrom(address(this), _to, _tokenId);
    }

    function withdrawERC1155(
        address _token,
        address _to,
        uint256 _id,
        uint256 _amount,
        bytes memory _data,
        bytes calldata _signature
    ) external onlyAuthorized nonReentrant {
        require(
            verifySignature(msg.sender, _to, _id, _signature),
            "Invalid signature"
        );
        IERC1155(_token).safeTransferFrom(
            address(this),
            _to,
            _id,
            _amount,
            _data
        );
    }

    function balanceOfERC20(address _token) external view returns (uint256) {
        return IERC20(_token).balanceOf(address(this));
    }

    function balanceOfERC721(
        address _token,
        uint256 _tokenId
    ) external view returns (bool) {
        return IERC721(_token).ownerOf(_tokenId) == address(this);
    }

    function balanceOfERC1155(
        address _token,
        uint256 _id
    ) external view returns (uint256) {
        return IERC1155(_token).balanceOf(address(this), _id);
    }

    function verifySignature(
        address _from,
        address _to,
        uint256 _amount,
        bytes memory _signature
    ) internal view returns (bool) {
        // Signature verification logic here
        // Returns true if the signature is valid, otherwise false
    }

    function requestDataViaChainlink(address _contractAddress) external {
        Chainlink.Request memory req = buildChainlinkRequest(
            oracle,
            this.fulfill.selector,
            address(this),
            this.fulfill.selector
        );
        string memory apiUrl = string(
            abi.encodePacked(
                "https://api.openai.com/v1/analyze_contract?contract=",
                _contractAddress
            )
        );
        req.add("get", apiUrl);
        req.add("path", "result");
        req.add("copyPath", "scam");
        req.add("times", "1000000000");
        sendChainlinkRequestTo(oracle, req, ORACLE_PAYMENT);
    }

    function fulfill(
        bytes32 _requestId,
        bytes32 _result
    ) public recordChainlinkFulfillment(_requestId) {
        if (_result == "true") {
            // EVENT: The contract is suspect, warn the user
        } else {
            // EVENT: The contract is safe, allow the transaction
        }
    }
}
